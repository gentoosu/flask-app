name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: "3.13"
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: pip install flake8

      - name: Run Linter
        run: flake8 app.py --max-line-length=100

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          pip install flask pytest
          pip install -r requirements.txt

      - name: Run Tests
        run: pytest

  build-and-push:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name != 'pull_request' # Only push images on main branch merges
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate Calendar Version Tag
        id: calver
        run: |
          VERSION=$(date +'%Y.%m.%d.%H%M')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Generated CalVer version: $VERSION"

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY

      - name: Build and Tag Docker Image
        run: |
          docker build -t $ECR_REPOSITORY:$VERSION .
          docker tag $ECR_REPOSITORY:$VERSION $ECR_REPOSITORY:latest

      - name: Push Docker Image to ECR
        run: |
          docker push $ECR_REPOSITORY:$VERSION
          docker push $ECR_REPOSITORY:latest

      - name: Create Git Tag
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag $VERSION
          git push origin $VERSION
